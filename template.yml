AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  The resources for providing a service for listing users and roles.
  It includes a table containing users and roles and lambda functions for accessing the data.

Parameters:
  CognitoAuthorizerArn:
    Type: String
  UsersAndRolesTableName:
    Type: String
  StageName:
    Type: String

Globals:
  Api:
    Cors:
      AllowMethods: '''POST, PUT, GET,OPTIONS'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''

Resources:

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Orestis testing API
          description: Api for updating users and roles
          version: 1.0.0
        paths:
          /users/{username}:
            get:
              summary: Gets an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              security:
                - CognitoUserPool: [ ]
              responses:
                '200':
                  description: Successful fetching of User. Returns the requested User
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            Role:
              properties:
                type:
                  type: string
                rolename:
                  type: string
            User:
              properties:
                type:
                  type: string
                username:
                  type: string
                institution:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
  UserRoleMappings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UsersAndRolesTableName
      AttributeDefinitions:
        - AttributeName: PrimaryKeyHashKey
          AttributeType: S
        - AttributeName: PrimaryKeyRangeKey
          AttributeType: S
        - AttributeName: SecondaryIndex1HashKey
          AttributeType: S
        - AttributeName: SecondaryIndex1RangeKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PrimaryKeyHashKey
          KeyType: HASH
        - AttributeName: PrimaryKeyRangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SearchUsersByInstitution
          KeySchema:
            - AttributeName: SecondaryIndex1HashKey
              KeyType: HASH
            - AttributeName: SecondaryIndex1RangeKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL


  GetUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: no.unit.nva.handlers.GetUserHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE:  !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: get
            RestApiId: !Ref RestApi